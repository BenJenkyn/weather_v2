{"version":3,"sources":["api/index.ts","components/CityInput/index.tsx","lib/WeatherInfoBox/index.tsx","lib/tempConversions.ts","components/TemperatureDisplay/index.tsx","components/DetailedWeather/index.tsx","components/FeelsLike/index.tsx","App.tsx","index.tsx"],"names":["require","config","weatherApi","city","a","url","fetch","weatherResponse","ok","json","weatherData","status","fetchWeatherData","weather","CityInput","props","setWeatherData","tempType","setTempType","useState","isLoading","setIsLoading","setCity","errorMessage","setErrorMessage","isInvalid","setIsInvalid","maxWidth","height","padding","backgroundColor","borderRadius","colSpan","onSubmit","e","preventDefault","then","res","catch","err","console","error","_hover","textColor","textAlign","onClick","type","value","onChange","target","className","placeholder","borderColor","fontSize","name","sys","country","WeatherInfoBox","isDouble","minWidth","children","toCelcius","tempKalvin","toFarenheit","getTemperature","tempMeasurement","TemperatureDisplay","flex","main","temp","toFixed","margin","temp_min","temp_max","DetailedWeather","iconId","alignContent","flexDirection","alignItems","src","icon","alt","description","width","FeelsLike","feels_like","App","columnGap","rowGap","templateColumns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAAAA,EAAQ,IAAUC,SAElB,IA+CaC,EAAU,uCAAG,WACzBC,GADyB,mBAAAC,EAAA,6DAGnBC,EAHmB,4DAGwCF,EAHxC,kBA/CX,oCA+CW,SAKKG,MAAMD,GALX,YAKnBE,EALmB,QAOLC,GAPK,gCAQED,EAAgBE,OARlB,cAQlBC,EARkB,yBASjBA,GATiB,YAWrBH,EAAgBI,QAAU,KAXL,0CAYjB,iDAZiB,iCAclB,qBAdkB,4CAAH,sD,OCvBjBC,EAAgB,uCAAG,WAAOT,GAAP,eAAAC,EAAA,sEACDF,EAAWC,GADV,YACjBU,EADiB,iDAGdA,GAHc,2CAAH,sDAgHPC,EAzGG,SAACC,GACjB,IAAQL,EAAuDK,EAAvDL,YAAaM,EAA0CD,EAA1CC,eAAgBC,EAA0BF,EAA1BE,SAAUC,EAAgBH,EAAhBG,YAE/C,EAAkCC,oBAAkB,GAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAiB,IAAzC,mBAAOhB,EAAP,KAAamB,EAAb,KACA,EAAwCH,qBAAxC,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAkCL,oBAAkB,GAApD,mBAAOM,EAAP,KAAkBC,EAAlB,KAmCA,OAAIN,EAEA,cAAC,IAAD,UACE,cAAC,IAAD,MAMJ,eAAC,IAAD,CACEO,SAAS,SACTC,OAAO,QACPC,QAAQ,OACRC,gBAAgB,UAChBC,aAAa,OACbC,QAAS,EANX,UAQE,sBAAMC,SA9CW,SAACC,GACpBA,EAAEC,iBAEFd,GAAa,GACbT,EAAiBT,GACdiC,MAAK,SAACC,GACc,kBAARA,GACTb,EAAgBa,GAChBX,GAAa,KAEbV,EAAeqB,GACfX,GAAa,OAGhBY,OAAM,SAACC,GACNC,QAAQC,MAAM,sBAAuBF,MAGzClB,GAAa,IA4BX,SACE,eAAC,IAAD,CAAaI,UAAWA,EAAxB,UACE,cAAC,IAAD,mBACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEiB,OAAQ,CACNZ,gBAAiB,WAEnBA,gBAAgB,UAChBa,UAAU,QACVC,UAAU,SACVC,QApCW,WACJ,YAAb5B,EACFC,EAAY,aACU,cAAbD,GACTC,EAAY,YAiCJ4B,KAAK,SARP,SAUgB,YAAb7B,EAAyB,QAAO,UAEnC,cAAC,IAAD,CACE6B,KAAK,OACLC,MAAO5C,EACP6C,SArES,SAACd,GACpBZ,EAAQY,EAAEe,OAAOF,QAqEPG,UAAU,aACVC,YAAY,eACZC,YAAY,YAEd,cAAC,IAAD,CACEV,OAAQ,CACNZ,gBAAiB,WAEnBA,gBAAgB,UAChBa,UAAU,QACVG,KAAK,SANP,uBAWF,cAAC,IAAD,UAAmBvB,SAGvB,cAAC,IAAD,CAAM8B,SAAS,KAAf,SACG3C,GAAeA,EAAY4C,MAAQ5C,EAAY6C,IAA/C,UACM7C,EAAY4C,KADlB,aAC2B5C,EAAY6C,IAAIC,SACxC,SC3GGC,EAjBQ,SAAC1C,GACvB,IAAQ2C,EAAa3C,EAAb2C,SACR,OACC,cAAC,IAAD,CACC/B,SAAU+B,EAAW,CAAC,QAAS,UAAY,CAAC,SAAU,SAAU,SAChEC,SAAS,QACT/B,OAAO,QACPC,QAAQ,OACRE,aAAa,OACbC,QAAS0B,EAAW,CAAC,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,GACvC5B,gBAAgB,UAPjB,SASEf,EAAM6C,YClBGC,EAAY,SAACC,GAEtB,OADgBA,EAAa,QAIpBC,EAAc,SAACD,GAGxB,OADyB,IADTD,EAAUC,GACY,IAI7BE,EAAiB,SAACF,GAA8E,IAA1DG,EAAyD,uDAAtB,UAClF,MAAwB,YAApBA,EACOJ,EAAUC,GAEG,cAApBG,EACOF,EAAYD,IAEf,KCsBGI,EAnCY,SAACnD,GAC3B,IAAQL,EAA0BK,EAA1BL,YAAaO,EAAaF,EAAbE,SACrB,OACC,cAAC,EAAD,CAAgByC,UAAQ,EAAxB,SACC,eAAC,IAAD,WACC,eAAC,IAAD,CAAKS,KAAK,IAAV,UACC,cAAC,IAAD,CAAMd,SAAS,KAAKT,UAAU,SAA9B,SACElC,EAAW,UACNsD,EAAc,OAACtD,QAAD,IAACA,OAAD,EAACA,EAAa0D,KAAKC,KAAMpD,GAAUqD,QAAQ,IAC5D,OAEJ,eAAC,IAAD,CAAMjB,SAAS,KAAKT,UAAU,SAA9B,iBACkB,YAAX3B,EAAuB,IAAM,UAGrC,eAAC,IAAD,CAAKkD,KAAK,IAAId,SAAS,KAAKkB,OAAO,OAAnC,UACC,eAAC,IAAD,kBACM,IACJ7D,EAAW,UACNsD,EAAc,OAACtD,QAAD,IAACA,OAAD,EAACA,EAAa0D,KAAKI,SAAUvD,GAAUqD,QAAQ,GADvD,QAET,QAEJ,eAAC,IAAD,mBACO,IACL5D,EAAW,UACNsD,EAAc,OAACtD,QAAD,IAACA,OAAD,EAACA,EAAa0D,KAAKK,SAAUxD,GAAUqD,QAAQ,GADvD,QAET,QAEJ,cAAC,IAAD,UAAO5D,EAAW,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAaG,QAAQ,GAAGuD,KAAO,gB,QCL1CM,EAvBS,SAAC3D,GACxB,IL0DgC4D,EK1DxBjE,EAAgBK,EAAhBL,YACR,OACC,cAAC,EAAD,UACC,eAAC,IAAD,CAAMkE,aAAa,SAASC,cAAc,SAASC,WAAW,SAA9D,UACEpE,GACA,cAAC,IAAD,CAAKyD,KAAM,EAAX,SACC,cAAC,IAAD,CACCY,KLmD0BJ,EKnDL,OAACjE,QAAD,IAACA,OAAD,EAACA,EAAaG,QAAQ,GAAGmE,KLoD/B,4CAAwCL,EAAxC,YKnDfM,IAAKvE,EAAYG,QAAQ,GAAGqE,YAC5BC,MAAO,IACPvD,OAAQ,QAIX,cAAC,IAAD,CAAMuC,KAAM,EAAGd,SAAS,KAAxB,SACE3C,EAAW,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAaG,QAAQ,GAAGqE,YAAc,aCA3CE,EAhBG,SAACrE,GAClB,IAAQL,EAA0BK,EAA1BL,YAAaO,EAAaF,EAAbE,SACrB,OACC,cAAC,EAAD,UACC,eAAC,IAAD,CAAM4D,cAAc,SAASC,WAAW,SAAxC,UACC,cAAC,IAAD,CAAMX,KAAK,IAAId,SAAS,KAAxB,SACE3C,EAAW,UAAMsD,EAAetD,EAAY0D,KAAKiB,WAAYpE,GAAUqD,QAAQ,GAApE,QAA4E,OAEzF,cAAC,IAAD,CAAMH,KAAK,IAAId,SAAU,GAAzB,8B,MCgCWiC,MApCf,WACE,MAAsCnE,qBAAtC,mBAAOT,EAAP,KAAoBM,EAApB,KACA,EAAgCG,mBAA0B,WAA1D,mBAAOF,EAAP,KAAiBC,EAAjB,KAEA,OACE,qBAAKgC,UAAU,MAAf,SACE,cAAC,IAAD,CAAWvB,SAAS,eAAeE,QAAQ,OAA3C,SACE,eAAC,IAAD,CACE0D,UAAW,CAAC,MAAO,MAAO,QAC1BC,OAAQ,CAAC,MAAO,MAAO,QACvBC,gBAAgB,iBAHlB,UAKE,cAAC,EAAD,CACE/E,YAAaA,EACbM,eAAgBA,EAChBE,YAAaA,EACbD,SAAUA,IAEZ,cAAC,EAAD,CACEP,YAAaA,EACbO,SAAUA,IAEZ,cAAC,EAAD,CACEP,YAAaA,EACbO,SAAUA,IAEZ,cAAC,EAAD,CACEP,YAAaA,EACbO,SAAUA,Y,QClCtByE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.1d3a4e62.chunk.js","sourcesContent":["require('dotenv').config();\r\n\r\nconst apiKey = 'fbaa3d68a5a1505f1469d317c664dcac' //process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nexport interface WeatherResponse {\r\n\tcoord: {\r\n\t\tlon: number;\r\n\t\tlat: number;\r\n\t};\r\n\tweather: [\r\n\t\t{\r\n\t\t\tid: number;\r\n\t\t\tmain: string;\r\n\t\t\tdescription: string;\r\n\t\t\ticon: string;\r\n\t\t}\r\n\t];\r\n\tbase: string;\r\n\tmain: {\r\n\t\ttemp: number;\r\n\t\tfeels_like: number;\r\n\t\ttemp_min: number;\r\n\t\ttemp_max: number;\r\n\t\tpressure: number;\r\n\t\thumidity: number;\r\n\t};\r\n\tvisibility: number;\r\n\twind: {\r\n\t\tspeed: number;\r\n\t\tdeg: number;\r\n\t};\r\n\tclouds: {\r\n\t\tall: number;\r\n\t};\r\n\tdt: number;\r\n\tsys: {\r\n\t\ttype: number;\r\n\t\tid: number;\r\n\t\tmessage: number;\r\n\t\tcountry: string;\r\n\t\tsunrise: number;\r\n\t\tsunset: number;\r\n\t};\r\n\ttimezone: number;\r\n\tid: number;\r\n\tname: string;\r\n\tcod: number;\r\n}\r\n\r\nexport const weatherApi = async (\r\n\tcity: string\r\n): Promise<WeatherResponse | string | null> => {\r\n\tconst url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n\tconst weatherResponse = await fetch(url);\r\n\r\n\tif (weatherResponse.ok) {\r\n\t\tconst weatherData = await weatherResponse.json();\r\n\t\treturn weatherData;\r\n\t}\r\n\tif (weatherResponse.status >= 500) {\r\n\t\treturn 'Issue with the server. Please try again later';\r\n\t}\r\n\treturn 'Invalid city name';\r\n};\r\n\r\nexport const getWeatherImgUrl = (iconId: string): string => {\r\n\tconst weatherImageUrl = `https://openweathermap.org/img/wn/${iconId}@4x.png`;\r\n\treturn weatherImageUrl;\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Center,\r\n  Input,\r\n  Spinner,\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n  Text,\r\n  Flex,\r\n  GridItem,\r\n} from '@chakra-ui/react';\r\n\r\nimport { weatherApi, WeatherResponse } from '../../api';\r\nimport { measurementUnit } from '../../lib/tempConversions';\r\n\r\ninterface Props {\r\n  weatherData?: WeatherResponse;\r\n  setWeatherData: React.Dispatch<\r\n    React.SetStateAction<WeatherResponse | undefined>\r\n  >;\r\n  setTempType: React.Dispatch<React.SetStateAction<measurementUnit>>;\r\n  tempType: measurementUnit;\r\n}\r\n\r\nconst fetchWeatherData = async (city: string) => {\r\n  const weather = await weatherApi(city);\r\n  if (weather) {\r\n    return weather;\r\n  }\r\n};\r\n\r\nconst CityInput = (props: Props) => {\r\n  const { weatherData, setWeatherData, tempType, setTempType } = props;\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [city, setCity] = useState<string>('');\r\n  const [errorMessage, setErrorMessage] = useState<string>();\r\n  const [isInvalid, setIsInvalid] = useState<boolean>(false);\r\n\r\n  const handleChange = (e: any) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    setIsLoading(true);\r\n    fetchWeatherData(city)\r\n      .then((res) => {\r\n        if (typeof res === 'string') {\r\n          setErrorMessage(res);\r\n          setIsInvalid(true);\r\n        } else {\r\n          setWeatherData(res);\r\n          setIsInvalid(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error('trouble fetcing api', err);\r\n      });\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const changeTempType = () => {\r\n    if (tempType === 'celcius') {\r\n      setTempType('farenheit');\r\n    } else if (tempType === 'farenheit') {\r\n      setTempType('celcius');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Center>\r\n        <Spinner />\r\n      </Center>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <GridItem\r\n      maxWidth=\"1000px\"\r\n      height=\"200px\"\r\n      padding=\"10px\"\r\n      backgroundColor=\"#486581\"\r\n      borderRadius=\"15px\"\r\n      colSpan={4}\r\n    >\r\n      <form onSubmit={handleSubmit}>\r\n        <FormControl isInvalid={isInvalid}>\r\n          <FormLabel>City</FormLabel>\r\n          <Flex>\r\n            <Button\r\n              _hover={{\r\n                backgroundColor: '#829ab1',\r\n              }}\r\n              backgroundColor=\"#334e68\"\r\n              textColor=\"white\"\r\n              textAlign=\"center\"\r\n              onClick={changeTempType}\r\n              type=\"button\"\r\n            >\r\n              {tempType === 'celcius' ? '°F' : '°C'}\r\n            </Button>\r\n            <Input\r\n              type=\"text\"\r\n              value={city}\r\n              onChange={handleChange}\r\n              className=\"city-input\"\r\n              placeholder=\"e.g. Toronto\"\r\n              borderColor=\"#829ab1\"\r\n            />\r\n            <Button\r\n              _hover={{\r\n                backgroundColor: '#829ab1',\r\n              }}\r\n              backgroundColor=\"#334e68\"\r\n              textColor=\"white\"\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Flex>\r\n          <FormErrorMessage>{errorMessage}</FormErrorMessage>\r\n        </FormControl>\r\n      </form>\r\n      <Text fontSize=\"55\">\r\n        {weatherData && weatherData.name && weatherData.sys\r\n          ? `${weatherData.name}, ${weatherData.sys.country}`\r\n          : ''}\r\n      </Text>\r\n    </GridItem>\r\n  );\r\n};\r\n\r\nexport default CityInput;\r\n","import React from 'react';\r\nimport { GridItem } from '@chakra-ui/react';\r\n\r\ninterface WeatherInfoBoxProps {\r\n\tisDouble?: boolean;\r\n\tchildren: JSX.Element;\r\n}\r\n\r\nconst WeatherInfoBox = (props: WeatherInfoBoxProps) => {\r\n\tconst { isDouble } = props;\r\n\treturn (\r\n\t\t<GridItem\r\n\t\t\tmaxWidth={isDouble ? ['450px', '1000px'] : ['1000px', '1000px', '200px']}\r\n\t\t\tminWidth='200px'\r\n\t\t\theight='200px'\r\n\t\t\tpadding='10px'\r\n\t\t\tborderRadius='15px'\r\n\t\t\tcolSpan={isDouble ? [4, 4, 2] : [4, 4, 1]}\r\n\t\t\tbackgroundColor='#486581'\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</GridItem>\r\n\t);\r\n};\r\n\r\nexport default WeatherInfoBox;\r\n","export type measurementUnit = 'celcius' | 'farenheit';\r\n\r\nexport const toCelcius = (tempKalvin: number): number => {\r\n    const celcius = tempKalvin - 273.15;\r\n    return celcius;\r\n};\r\n  \r\nexport const toFarenheit = (tempKalvin: number): number => {\r\n    const celcius = toCelcius(tempKalvin);\r\n    const farenheit = celcius * (9 / 5) + 32;\r\n    return farenheit;\r\n};\r\n\r\nexport const getTemperature = (tempKalvin: number, tempMeasurement: measurementUnit = 'celcius'): number => {\r\n    if (tempMeasurement === 'celcius'){\r\n        return(toCelcius(tempKalvin))\r\n    }\r\n    if (tempMeasurement === 'farenheit'){\r\n        return(toFarenheit(tempKalvin))\r\n    }\r\n    return -10000\r\n}","import React from 'react';\r\nimport { Flex, Text, Box } from '@chakra-ui/react';\r\n\r\nimport WeatherInfoBox from '../../lib/WeatherInfoBox';\r\nimport { getTemperature } from '../../lib/tempConversions';\r\nimport { WeatherBoxProps } from '../../lib/WeatherInfoBoxProps';\r\n\r\nconst TemperatureDisplay = (props: WeatherBoxProps) => {\r\n\tconst { weatherData, tempType } = props;\r\n\treturn (\r\n\t\t<WeatherInfoBox isDouble>\r\n\t\t\t<Flex>\r\n\t\t\t\t<Box flex='1'>\r\n\t\t\t\t\t<Text fontSize='90' textAlign='center'>\r\n\t\t\t\t\t\t{weatherData\r\n\t\t\t\t\t\t\t? `${getTemperature(weatherData?.main.temp, tempType).toFixed(1)}`\r\n\t\t\t\t\t\t\t: '--'}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t\t<Text fontSize='24' textAlign='center'>\r\n\t\t\t\t\t\t&deg;{tempType==='celcius' ? 'C' : 'F'}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Box flex='1' fontSize='24' margin='auto'>\r\n\t\t\t\t\t<Text>\r\n\t\t\t\t\t\tLow:{' '}\r\n\t\t\t\t\t\t{weatherData\r\n\t\t\t\t\t\t\t? `${getTemperature(weatherData?.main.temp_min, tempType).toFixed(1)}°`\r\n\t\t\t\t\t\t\t: '--'}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t\t<Text>\r\n\t\t\t\t\t\tHigh:{' '}\r\n\t\t\t\t\t\t{weatherData\r\n\t\t\t\t\t\t\t? `${getTemperature(weatherData?.main.temp_max, tempType).toFixed(1)}°`\r\n\t\t\t\t\t\t\t: '--'}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t\t<Text>{weatherData ? weatherData?.weather[0].main : '--'}</Text>\r\n\t\t\t\t</Box>\r\n\t\t\t</Flex>\r\n\t\t</WeatherInfoBox>\r\n\t);\r\n};\r\n\r\nexport default TemperatureDisplay;\r\n","import React from 'react';\r\nimport { Image, Text, Flex, Box } from '@chakra-ui/react';\r\n\r\nimport WeatherInfoBox from '../../lib/WeatherInfoBox';\r\nimport { getWeatherImgUrl } from '../../api';\r\nimport { WeatherBoxProps } from '../../lib/WeatherInfoBoxProps';\r\n\r\nconst DetailedWeather = (props: WeatherBoxProps) => {\r\n\tconst { weatherData } = props;\r\n\treturn (\r\n\t\t<WeatherInfoBox>\r\n\t\t\t<Flex alignContent='center' flexDirection='column' alignItems='center'>\r\n\t\t\t\t{weatherData && (\r\n\t\t\t\t\t<Box flex={2}>\r\n\t\t\t\t\t\t<Image\r\n\t\t\t\t\t\t\tsrc={getWeatherImgUrl(weatherData?.weather[0].icon)}\r\n\t\t\t\t\t\t\talt={weatherData.weather[0].description}\r\n\t\t\t\t\t\t\twidth={150}\r\n\t\t\t\t\t\t\theight={150}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t)}\r\n\t\t\t\t<Text flex={1} fontSize='24'>\r\n\t\t\t\t\t{weatherData ? weatherData?.weather[0].description : '--'}\r\n\t\t\t\t</Text>\r\n\t\t\t</Flex>\r\n\t\t</WeatherInfoBox>\r\n\t);\r\n};\r\n\r\nexport default DetailedWeather;\r\n","import React from 'react';\r\nimport { Text, Flex } from '@chakra-ui/react';\r\n\r\nimport WeatherInfoBox from '../../lib/WeatherInfoBox';\r\nimport { getTemperature } from '../../lib/tempConversions';\r\nimport { WeatherBoxProps } from '../../lib/WeatherInfoBoxProps';\r\n\r\nconst FeelsLike = (props: WeatherBoxProps) => {\r\n\tconst { weatherData, tempType } = props;\r\n\treturn (\r\n\t\t<WeatherInfoBox>\r\n\t\t\t<Flex flexDirection='column' alignItems='center'>\r\n\t\t\t\t<Text flex='2' fontSize='80'>\r\n\t\t\t\t\t{weatherData ? `${getTemperature(weatherData.main.feels_like, tempType).toFixed(1)}°` : '--'}\r\n\t\t\t\t</Text>\r\n\t\t\t\t<Text flex='1' fontSize={24}>\r\n\t\t\t\t\tFeels Like\r\n\t\t\t\t</Text>\r\n\t\t\t</Flex>\r\n\t\t</WeatherInfoBox>\r\n\t);\r\n};\r\n\r\nexport default FeelsLike;\r\n","import React, { useState } from 'react';\r\nimport { Container, Grid } from '@chakra-ui/react';\r\n\r\nimport CityInput from './components/CityInput';\r\nimport TemperatureDisplay from './components/TemperatureDisplay';\r\nimport DetailedWeather from './components/DetailedWeather';\r\nimport FeelsLike from './components/FeelsLike';\r\nimport { WeatherResponse } from './api';\r\nimport { measurementUnit } from './lib/tempConversions';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  const [weatherData, setWeatherData] = useState<WeatherResponse>();\r\n  const [tempType, setTempType] = useState<measurementUnit>('celcius');\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container maxWidth=\"container.lg\" padding=\"10px\">\r\n        <Grid\r\n          columnGap={['5px', '5px', '50px']}\r\n          rowGap={['5px', '5px', '10px']}\r\n          templateColumns=\"repeat(4, 1fr)\"\r\n        >\r\n          <CityInput\r\n            weatherData={weatherData}\r\n            setWeatherData={setWeatherData}\r\n            setTempType={setTempType}\r\n            tempType={tempType}\r\n          />\r\n          <TemperatureDisplay\r\n            weatherData={weatherData}\r\n            tempType={tempType}\r\n          />\r\n          <DetailedWeather\r\n            weatherData={weatherData}\r\n            tempType={tempType}\r\n          />\r\n          <FeelsLike\r\n            weatherData={weatherData}\r\n            tempType={tempType}\r\n          />\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}